Invert the Binary Tree


Given the root of a binary tree, invert the tree, and return its root. Print the Inorder traversal of the inverted tree.



Input format:

The input consists of one line, space-separated elements denoting the nodes of the Binary Tree.



Output format:

Print the inorder traversal of the inverted tree in a single line.



Example 1:





Example 2:

Test Case 2check_circle
â€‹
Input
1 3 2
Output
2 1 3
Your output
2 1 3
Compiler Message
Test case passed.


+++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node 
{
    int data;
    Node left;
    Node right;
    Node(int data) 
	{
        this.data = data;
        this.left = null;
        this.right = null;
    }
}
public class Main 
{
    public static void main(String[] args) 
	{
        Scanner sc = new Scanner(System.in);
        String[] inp = sc.nextLine().split(" ");
        if (inp.length == 0 || inp[0].equals("N")) 
		{
            System.out.println("");
            return;
        }
        Node root = buildTree(inp);
        root = invert(root);
        List<Integer> inorderList = new ArrayList<>();
        inorder(root, inorderList);
        for (int i = 0; i < inorderList.size(); i++) 
		{
            if (i > 0) System.out.print(" ");
            System.out.print(inorderList.get(i));
        }
    }
    private static Node buildTree(String[] inp) 
	{
        Node root = new Node(Integer.parseInt(inp[0]));
        Queue<Node> queue = new LinkedList<>();
        queue.add(root);
        int i = 1;
        while (i < inp.length) 
		{
            Node current = queue.poll();
            if (i < inp.length && !inp[i].equals("N")) 
			{
                current.left = new Node(Integer.parseInt(inp[i]));
                queue.add(current.left);
            }
            i++;
            if (i < inp.length && !inp[i].equals("N")) 
			{
                current.right = new Node(Integer.parseInt(inp[i]));
                queue.add(current.right);
            }
            i++;
        }
        return root;
    }
    private static Node invert(Node root) 
	{
        if (root == null) return null;
        Node left = invert(root.left);
        Node right = invert(root.right);
        root.left = right;
        root.right = left;
        return root;
    }
    private static void inorder(Node root, List<Integer> inorderList) 
	{
        if (root == null) return;
        inorder(root.left, inorderList);
        inorderList.add(root.data);
        inorder(root.right, inorderList);
    }
}
