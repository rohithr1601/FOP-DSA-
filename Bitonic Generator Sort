Bitonic Generator Sort
Given an array of N distinct numbers, the task is to sort all even-placed numbers in increasing and odd-placed numbers in decreasing order. The modified array should contain, all sorted even-placed numbers followed by reverse sorted odd-placed numbers.

Note: The first element is considered as even because of its index 0.



Format:

Input:

The first line of input contains an integer T denoting the number of test cases. Then T test cases follow. Each test case contains an integer N denoting the size of the array. The next line contains N space-separated integers forming the array.

Output:

Print the modified array which contains all sorted even placed numbers followed by reverse sorted odd placed numbers.



Constraints:

1 <= T <= 10^5

1 <= n <= 10^5

1 <= a[i] <= 10^5



Example:

Input:

2

8

0 1 2 3 4 5 6 7

9

3 1 2 4 5 9 13 14 12

Output:

0 2 4 6 7 5 3 1

2 3 5 12 13 14 9 4 1


Case 1
Case 2
Input (stdin)
2
8
0 1 2 3 4 5 6 7
9
3 1 2 4 5 9 13 14 12

Output (stdout)
0 2 4 6 7 5 3 1
2 3 5 12 13 14 9 4 1

+++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Main
{
  public static void main(String args[])
  {
    Scanner sc = new Scanner(System.in);
    int t = sc.nextInt();
    for(int i=0;i<t;i++)
    {
		int n = sc.nextInt();
        int[] a = new int[n];
      	for(int j = 0;j<n;j++)
      	{
        	a[j] = sc.nextInt();
      	}
      ArrayList<Integer> even = new ArrayList<>();
      ArrayList<Integer> odd = new ArrayList<>();
      for(int j=0;j<n;j++)
      {
        if(j%2==0)
          even.add(a[j]);
        else
          odd.add(a[j]);
      }
      Collections.sort(even);
      Collections.sort(odd, Collections.reverseOrder());
      for(int j : even)
        System.out.print(j + " ");
      for(int k: odd)
        System.out.print(k + " ");
      System.out.println();
    }
  }
}
