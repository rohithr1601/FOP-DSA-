Card Rotation
We are given a sorted deck of cards numbered from 1 to N.

1) We pick up 1 card and put it on the back of the deck.

2) Now, we pick up another card, it turns out to be a card numbered 1. We put that card outside the deck.

3) Now we pick up the card and put it on the back of a deck.

4) And, we pick up another card, it turns out to be a card numbered 2. We will put the card outside the deck.

We perform this step till the last card. If such arrangement of decks is possible. We have to arrange and print the output. If it is not possible for a particular value of N then, the output is -1.



Format:

Input:

The first line of the input contains the number of test cases 'T', after that 'T' test cases follow. Each line of the test case consists of a single line, containing an integer 'N'.

Output:

If such arrangement of decks is possible, arrange and print the output. If it is not possible for a particular value of N, then output -1.



Constraints:

1 <= T <= 100

1 <= N <= 1000

 

Example:

Input :

2

4

5

Output :

2 1 4 3

3 1 4 5 2

Explanation:

Test Case 1: We initially have [2 1 4 3]

In Step1, we move the first card to the end. Now the deck is: [1 4 3 2]

In Step2, we get 1. Hence we remove it. Now the deck is: [4 3 2]

In Step3, we move the 2 front cards only by one to the end ([4 3 2] -> [3 2 4] -> [2 4 3]). Now the deck is: [2 4 3]

In Step4, we get 2. Hence we remove it. Now the deck is: [4 3]

In Step5, the following sequence follows: [4 3] -> [3 4] -> [4 3] -> [3 4]. Now the deck is: [3 4]

In Step6, we get 3. Hence we remove it. Now the deck is: [4]

Finally, we're left with a single card and thus, we stop.


Case 1
Case 2
Input (stdin)
2
4
5

Output (stdout)
2 1 4 3
3 1 4 5 2

+++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Main
{
    ArrayList<Integer> rotation(int n)
	{
        LinkedList<Integer> deck = new LinkedList<>();
        for (int i = n; i >= 1; i--) 
		{
            deck.addFirst(i);
            for (int j = 0; j < i; j++) 
			{
                deck.addFirst(deck.removeLast());
            }
        }
        ArrayList<Integer> list = new ArrayList<>();
        for (int num : deck) 
		{
            list.add(num);
        }
        return list;
    }
    public static void main(String[] args) 
	{
        Main l1= new Main();
        Scanner sc = new Scanner(System.in);
      	int t = sc.nextInt();
      	for(int i=0;i<t;i++)
        {
        		int N = sc.nextInt();
        		ArrayList<Integer> res = l1.rotation(N);
        		for (int card : res) 
				{
            		System.out.print(card + " ");
        		}
          	System.out.println();
        }
    }
}
