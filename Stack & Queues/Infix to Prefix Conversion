Infix to Prefix conversion
Write a program to take an infix expression as a string input. To return the corresponding prefix expression in the output.

Note:

1. The string contains operator (+, -, /, *), parenthesis, and operands (digits).

2. Each digit is an operand.



Format:

Input:

The first line is a string that contains an infix expression.

Output:

The output is a string that contains a prefix expression.



Example:

Input:

(5-6)*7

Output:

*-567


Case 1
Input (stdin)
(5-6)*7

Output (stdout)
*-567

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    public static String infixToPrefix(String s) 
    {
        String rev = reverse(s);
        String mod = replaceParentheses(rev);
        String postfix = infixtopostfix(mod);
        return reverse(postfix);
    }
    public static String reverse(String s) 
    {
        char[] chars = s.toCharArray();
        int left = 0;
        int right = chars.length - 1;
        while (left < right) 
        {
            char temp = chars[left];
            chars[left] = chars[right];
            chars[right] = temp;
            left++;
            right--;
        }
        return new String(chars);
    }
    public static String replaceParentheses(String s) 
    {
        char[] chars = s.toCharArray();
        for (int i = 0; i < chars.length; i++) {
            if (chars[i] == '(') {
                chars[i] = ')';
            } else if (chars[i] == ')') {
                chars[i] = '(';
            }
        }
        return new String(chars);
    }
    public static String infixtopostfix(String s) 
    {
        Stack<Character> st = new Stack<>();
        String res = "";
        for (char c : s.toCharArray()) {
            if (Character.isLetterOrDigit(c)) {
                res += c;
            } else if (c == '(') {
                st.push(c);
            } else if (c == ')') {
                while (!st.isEmpty() && st.peek() != '(') {
                    res += st.pop();
                }
                st.pop();
            } else {
                while (!st.isEmpty() && precedence(c) <= precedence(st.peek())) {
                    res += st.pop();
                }
                st.push(c);
            }
        }
        while (!st.isEmpty()) {
            res += st.pop();
        }
        return res;
    }

    public static int precedence(char ch) {
        switch (ch) {
            case '+':
            case '-':
                return 1;
            case '*':
            case '/':
                return 2;
            case '^':
                return 3;
        }
        return -1;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String inp = sc.nextLine();
        System.out.println(infixToPrefix(inp));
    }
}

