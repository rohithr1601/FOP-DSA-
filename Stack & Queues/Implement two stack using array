Implement two stacks using an array
Write a program to implement the two stacks using one array. Consider the size of an array as 1000.



Format:

Input:

Get the number of elements to be inserted in stack 1.
And then, get the elements one by one.
Also, get the number of elements to be inserted in stack 2.
And then, get the elements one by one.
Get the number of elements to be deleted from stack 1.
Get the number of elements to be deleted from stack 2.
Output:

Print "Stack underflow. pop from stack 1 failed" message if the pop operation fails while doing it in stack 1.
Print the elements of stack 1.
Print "Stack underflow. pop from stack 1 failed" message if the pop operation fails while doing it in stack 2.
Print the elements of stack 2.


Example:

Input:

3

2 5 7

2

1 2

4

1

Output:

Stack 1 Elements:

7 5 2 

Stack 2 Elements:

2 1 

Stack underflow. pop from stack 1 failed

Stack 1 Elements:



Stack 2 Elements:

1 


Case 1
Input (stdin)
3
2 5 7
2
1 2
4
1

Output (stdout)
Stack 1 Elements:
7 5 2
Stack 2 Elements:
2 1
Stack underflow. pop from stack 1 failed
Stack 1 Elements:

Stack 2 Elements:
1

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class TwoStacks {
    int top1, top2;
    int size;
    int[] arr;

    TwoStacks(int size) {
        this.size = size;
        arr = new int[size];
        top1 = -1;
        top2 = size;
    }

    boolean isFull() {
        return top1 + 1 == top2;
    }

    boolean isEmpty1() {
        return top1 == -1;
    }

    boolean isEmpty2() {
        return top2 == size;
    }

    void push1(int x) {
        if (isFull()) {
            System.out.println("Stack1 is overflow");
        } else {
            arr[++top1] = x;
        }
    }

    void push2(int x) {
        if (isFull()) {
            System.out.println("Stack2 is overflow");
        } else {
            arr[--top2] = x;
        }
    }

    int pop1() {
        if (isEmpty1()) {
            System.out.println("Stack underflow. pop from stack 1 failed");
            return -1;
        } else {
            return arr[top1--];
        }
    }

    int pop2() {
        if (isEmpty2()) {
            System.out.println("Stack underflow. pop from stack 2 failed");
            return -1;
        } else {
            return arr[top2++];
        }
    }

    void display1() {
        System.out.println("Stack 1 Elements:");
        for (int i = top1; i >= 0; i--) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }

    void display2() {
        System.out.println("Stack 2 Elements:");
        for (int i = top2; i < size; i++) {
            System.out.print(arr[i] + " ");
        }
        System.out.println();
    }
}

public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        TwoStacks st = new TwoStacks(1000);

        int s1 = sc.nextInt();
        for (int i = 0; i < s1; i++) {
            st.push1(sc.nextInt());
        }

        int s2 = sc.nextInt();
        for (int i = 0; i < s2; i++) {
            st.push2(sc.nextInt());
        }

        st.display1();
        st.display2();

        int del1 = sc.nextInt();
        for (int i = 0; i < del1; i++) {
            st.pop1();
        }

        int del2 = sc.nextInt();
        for (int i = 0; i < del2; i++) {
            st.pop2();
        }

        st.display1();
        st.display2();
    }
}
