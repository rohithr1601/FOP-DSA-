Find the length of largest subarray with 0 sum
Given an array of integers, find the length of the longest sub-array with a sum that equals 0.



Sample Input & Output:

Input:

n=8

arr[] = {15, -2, 2, -8, 1, 7, 10, 23};

Output: 5

Explanation: The longest sub-array with elements summing up-to 0 is {-2, 2, -8, 1, 7}



Input:

n=3

arr[] = {1, 2, 3}

Output: 0

Explanation:There is no subarray with 0 sum



Input: 

n=3

arr[] = {1, 0, 3}

Output: 1

Explanation: The longest sub-array with elements summing up-to 0 is {0}




Case 1
Case 2
Input (stdin)
3
1 0 3

Output (stdout)
1

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    Scanner sc = new Scanner(System.in);
	    int n = sc.nextInt();
	    int[] a =new int[n];
	    for(int i=0;i<n;i++)
	    {
	        a[i] = sc.nextInt();
	    }
	    System.out.println(longest_subset(a, n));
	}
	static int longest_subset(int[] a, int n)
	{
	    Map<Integer, Integer> map = new HashMap<>();
	    int sum = 0;
	    int max = 0;
	    for(int i=0;i<n;i++)
	    {
	        sum += a[i];
	        if(sum ==0)
	        {
	            max= i+1;
	        }
	        else if(map.containsKey(sum))
	        {
	            max = Math.max(max, i-map.get(sum));
	        }
	        else
	        {
	            map.put(sum, i);
	        }
	    }
	    return max;
	}
}
