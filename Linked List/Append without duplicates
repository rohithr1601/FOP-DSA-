Append without duplicates
John is a teacher, he has assigned a roll number to each student in ascending order. Every time he assigns a number to a student, he wants to check whether the number is already assigned to any other student. This is to avoid duplicates in the roll number. Add a number to the list only if the number is not previously present. Implement this concept using a Linked List. If the list is empty, print "List is empty".



Format:

Input:

The input consists of a list of integers. The negative value in the list indicates the end.

Output:

The output should be the list of numbers in separate lines.



Example:

Input:

11

22

33

22

33

44

-77

Output:

11

22

33

44


Case 1
Case 2
Input (stdin)
11
22
33
22
33
44
-77

Output (stdout)
11
22
33
44

++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.Scanner;
class Node 
{
    int data;
    Node next;
    Node(int val) 
    {
        data = val;
        next = null;
    }
}
class LinkedList
{
    Node head;
    LinkedList() 
    {
        this.head = null;
    }
    boolean isEmpty() 
    {
        return head == null;
    }
    void append(int val) 
    {
        if (isEmpty()) 
        {
            head = new Node(val);
            return;
        }
        Node current = head;
        while (current.next != null) 
        {
            if (current.data == val) 
            {
                return;
            }
            current = current.next;
        }
        if (current.data == val) 
        {
            return;
        }
        current.next = new Node(val);
    }
    void display() 
    {
        if (isEmpty()) 
        {
          System.out.println("List is empty");
            return;
        }
        Node current = head;
        while (current != null) 
        {
            System.out.println(current.data);
            current = current.next;
        }
    }
}
public class Main 
{
    public static void main(String[] args) 
    {
        LinkedList l1 = new LinkedList();
        Scanner sc = new Scanner(System.in);
        while (true) 
        {
            int num = sc.nextInt();
            if (num < 0)
                break;
            l1.append(num);
        }
        l1.display();
    }
}
