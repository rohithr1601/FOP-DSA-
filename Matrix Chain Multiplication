QUESTION 01
bookmark_border
You have given some sequence of matrices, you have to find an efficient way to multiply all the matrices together(efficient means least number of multiplication).

You have an array A of size N ( N = no of matrices + 1) in which ith matrix is equal to A[i - 1] * A[i].



Input Format :

First line of input will contain one integer N - size of the array.

Second line of the input will contain N space separated integers - elements of the array.



Output Format :

Print product of matrices by efficient way.



Sample Input 1:

5

40 20 30 10 30



Sample Output 1:

26000



Explanation :

There are 4 matrices of dimension

40x20, 20x30, 30x10, 10x30. Say the matrices are

named as A, B, C, D. Out of all possible combinations,

the most efficient way is (A*(B*C))*D.

The number of operations are -

20*30*10 + 40*20*10 + 40*10*30 = 26000.



Sample Input 2 :

4

10 30 5 60



Sample Output 2 :

4500



Explanation :

The matrices have dimensions 10*30, 30*5, 5*60. Say the matrices are A, B and C. Out of all possible combinations, the most efficient way is (A*B)*C. The number of multiplications are -

10*30*5 + 10*5*60 = 4500.



Expected Time Complexity: O(N^3)

Expected Auxiliary Space: O(N^2)



Constraints: 

2 ≤ N ≤ 100

1 ≤ arr[i] ≤ 500


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    public static int mul(int[] a, int n) 
	{
        int[][] dp = new int[n][n];
        for (int i = 1; i < n; i++) 
		{
            dp[i][i] = 0;
        }
        for (int j = 2; j < n; j++) 
		{
            for (int i = 1; i < n - j + 1; i++) 
			{
                int k = i + j - 1;
                if (k == n) continue;
                dp[i][k] = dp[i][i] + dp[i + 1][k] + a[i - 1] * a[i] * a[k]; 
                for (int l = i + 1; l <= k - 1; l++) 
				{
                    int q = dp[i][l] + dp[l + 1][k] + a[i - 1] * a[l] * a[k];
                    if (q < dp[i][k]) 
					{
                        dp[i][k] = q;
                    }
                }
            }
        }
        return dp[1][n - 1];
    }
    public static void main(String[] args) 
	{
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; i++) 
		{
            a[i] = sc.nextInt();
        }
        System.out.println(mul(a, n));
    }
}
