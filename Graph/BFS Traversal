BFS Traversal
Write a program to implement the BFS traversal of a graph.



Example:

Input:

4

0 1

0 2

1 2

2 0

2 3

3 3

-1 -1

Output:

BFS : 0 1 2 3 

Note:

Start the vertex from 0. To stop reading, read the edge as -1 -1. Start the BFS traversal from vertex 0.

If the number of vertices is 0 then print "Graph doesn't exist".


Case 1
Case 2
Input (stdin)
4
0 1
0 2
1 2
2 0
2 3
3 3
-1 -1

Output (stdout)
BFS : 0 1 2 3

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
public class Main 
{
    static void addEdge(ArrayList<ArrayList<Integer>> al, int s, int d) 
    {
        if (s < al.size() && d < al.size()) 
        {
            al.get(s).add(d);
            al.get(d).add(s);
        } 
      	else 
      	{
            System.out.println("Invalid edge: (" + s + ", " + d + ")");
        }
    }
    static void BFS(ArrayList<ArrayList<Integer>> al, int start) 
    {
        boolean[] visited = new boolean[al.size()];
        Queue<Integer> queue = new LinkedList<>();
        visited[start] = true;
        queue.add(start);
        System.out.print("BFS : ");
        while (!queue.isEmpty()) 
        {
            int node = queue.poll();
            System.out.print(node + " ");
            for (int neighbor : al.get(node)) 
            {
                if (!visited[neighbor]) 
                {
                    visited[neighbor] = true;
                    queue.add(neighbor);
                }
            }
        }
        System.out.println();
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int v = sc.nextInt();
        if (v == 0) 
        {
            System.out.println("Graph doesn't exist");
            return;
        }
        ArrayList<ArrayList<Integer>> al = new ArrayList<>(v);
        for (int i = 0; i < v; i++) 
        {
            al.add(new ArrayList<>());
        }
        while (true) 
        {
            int s = sc.nextInt();
            int d = sc.nextInt();
            if (s == -1 && d == -1) 
            {
                break;
            } 
          	else 
            {
                addEdge(al, s, d);
            }
        }
        BFS(al, 0);
    }
}
