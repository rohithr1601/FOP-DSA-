Given a set of N intervals denoted by 2D array A of size N x 2, the task is to find the length of maximal set of mutually disjoint intervals.

Two intervals [x, y] & [p, q] are said to be disjoint if they do not have any point in common.

Return a integer denoting the length of maximal set of mutually disjoint intervals.



Input Format:

First line - n, the number of intervals

Then there are n lines each containing two integers.



Output Format:

Print an integer denoting the length of maximal set of mutually disjoint intervals.



Sample Input1:

4

1 3

2 4

4 6

8 9



Sample Output2:

3



Explanation:

Intervals: [ [1, 4], [2, 3], [4, 6], [8, 9] ]

Intervals [2, 3] and [1, 4] overlap.

We must include [2, 3] because if [1, 4] is included thenwe cannot include [4, 6].

We can include at max three disjoint intervals: [[2, 3], [4, 6], [8, 9]]



++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


import java.util.*;
public class Main 
{
    public static void main(String[] args) 
	{
        Scanner sc = new Scanner(System.in);
        int n =sc.nextInt();
        int[][] a=new int[n][2];
        for (int i = 0; i < n; i++) 
		{
            a[i][0] = sc.nextInt();
            a[i][1] = sc.nextInt();
        }
        for (int i =0;i<n-1;i++) 
		{
            for(int j=0;j<n-i-1;j++) 
			{
                if (a[j][1] > a[j+1][1]) 
				{
                    int[] temp = a[j];
                    a[j] = a[j+1];
                    a[j + 1] = temp;
                }
            }
        }
        int c=1;
        int e=a[0][1];
        for (int i=1;i<n;i++) 
		{
            if (a[i][0] > e) 
			{
                c++;
                e = a[i][1];
            }
        }
        System.out.println(c);
    }
}
