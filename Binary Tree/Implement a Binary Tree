Take Input Level Wise of Binary Tree and then print in the inorder format



Input Format

No

Constraints

No

Output Format

Inorder traversal of Binary tree

Sample Input 0

8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

1 3 4 6 7 8 10 13 14
Sample Input 1

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 1

4 2 5 1 6 3 7 



Case 1
Case 2
Input (stdin)
8 3 10 1 6 -1 14 -1 -1 4 7 13 -1 -1 -1 -1 -1 -1 -1

Output (stdout)
1 3 4 6 7 8 10 13 14

++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node 
{
    int data;
    Node left;
    Node right;
    Node(int a)
    {
        data = a;
        left = null;
        right = null;
    }
}
class Main 
{
    static Node head;
    static void insert(Scanner sc) 
    {
        Queue<Node> queue = new LinkedList<>();
        int x = sc.nextInt();
        if (x == -1) return;
        head = new Node(x);
        queue.add(head);
        while (!queue.isEmpty()) 
        {
            Node current = queue.poll();
            x = sc.nextInt();
            if (x != -1) 
            {
                current.left = new Node(x);
                queue.add(current.left);
            }
            x = sc.nextInt();
            if (x != -1) 
            {
                current.right = new Node(x);
                queue.add(current.right);
            }
        }
    }
    static void inorder(Node node) 
    {
        if (node == null) return;
        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        insert(sc);
        inorder(head);
    }
}
