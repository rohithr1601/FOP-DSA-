Given a BST and an integer k. Find if the integer k is present in given BST or not. You have to return true, if node with data k is present, return false otherwise.

Note: Assume that BST contains all unique elements.
Input Format

First Line array size
Second line array elements
Third line target value
Constraints

Time:- 1 Sec
Output Format

The first and only line of output contains a boolean value. Print true, if node with data k is present, print false otherwise.

Sample Input 0

6
8 5 10 2 6 7
2
Sample Output 0

true
Sample Input 1

6
8 5 10 2 6 7
12
Sample Output 1

false



Case 1
Case 2
Input (stdin)
6
8 5 10 2 6 7
2

Output (stdout)
true

+++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
import java.io.*;
class Node 
{
    int data;
    Node left;
    Node right;
    public Node(int data)
    {
        this.data = data;
    }
}
public class Main
{
    public static Node insert(Node root,int data)
    {
        Node newnode = new Node(data);
        if(root==null)
        {
            root = newnode;
            return root;
        }
        else if (root.data> data)
        {
            root.left = insert(root.left,data);
        }
        else if(root.data < data)
        {
            root.right = insert(root.right, data);
        }
        return root;
    }
    
    public void printTree(Node root)
    {
        if(root==null)
        {
            return;
        }
        System.out.print(root.data + ":");
        if(root.left != null)
        {
            System.out.print("L:" + root.left.data + ",");
        }
        if(root.right != null)
        {
            System.out.print("R:" + root.right.data);
        }
        System.out.println();
        printTree(root.left);
        printTree(root.right);
    }
    public static boolean search(Node root, int elt)
    {
        if(root == null)
        {
            return false;
        }
        if(root.data == elt)
        {
        return true;
        }
    	if(search(root.left, elt) || search(root.right, elt))
          return true;
      return false;
}

	public static void main(String[] args) 
	{
	    Scanner sc = new Scanner(System.in);
	   int t = sc.nextInt();
	   Node root = null;
	   for(int i=0;i<t;i++)
	   {
	       int data = sc.nextInt();
	       root = insert(root, data);
	   }
	   int searchelt = sc.nextInt();
	   System.out.print(search(root, searchelt));
	}
}
