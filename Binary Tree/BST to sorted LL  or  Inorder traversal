Given a BST, convert it into a sorted linked list. You have to return the head of LL.



Input Format

First line array size
Second line array elements
Constraints

Time:- 1 Sec
Output Format

The first and only line of output prints the elements of sorted linked list.
Sample Input 0

6
8 5 10 2 6 7
Sample Output 0

2 5 6 7 8 10
Sample Input 1

1
1
Sample Output 1

1



Case 1
Case 2
Input (stdin)
6
8 5 10 2 6 7

Output (stdout)
2 5 6 7 8 10


++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node 
{
    int data;
    Node left, right;
    public Node(int data) 
    {
        this.data = data;
        left = right = null;
    }
}
public class Main 
{
    static Node root;
    public static Node insert(Node root, int data) 
    {
        if (root == null) 
        {
            root = new Node(data);
            return root;
        }
        if (data < root.data) 
        {
            root.left = insert(root.left, data);
        } 
        else if (data > root.data) 
        {
            root.right = insert(root.right, data);
        }
        return root;
    }
    public static void inorder(Node root) 
    {
        if (root != null) 
        {
            inorder(root.left);
            System.out.print(root.data + " ");
            inorder(root.right);
        }
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        root = null;
        int n = sc.nextInt();
        for (int i = 0; i < n; i++) 
        {
            int data = sc.nextInt();
            root = insert(root, data);
        }
        inorder(root);
    }
}
