Implement the BST class which includes following functions -

insert - Given an element, insert that element in the BST at the correct position. If element is equal to the data of the node, insert it in the left subtree.
search - Given an element, find if that is present in BST or not. Return true or false.
delete - Given an element, remove that element from the BST. If the element which is to be deleted has both children, replace that with the minimum element from right sub-tree.
printTree (recursive) - Print the BST in in the following format -
For printing a node with data N, you need to follow the exact format -
N:L:x,R:y
where, N is data of any node present in the binary tree. x and y are the values of left and right child of node N. Print the children only if it is not null.
There is no space in between.
You need to print all nodes in the recursive format in different lines.
Input Format

First line number of queries
From Second line start giving queries
Constraints

No

Output Format

Results of each query in different line
Sample Input 0

6
1 2
1 3
1 1
4
2 2
4
Sample Output 0

2:L:1,R:3
1:
3:
3:L:1,
1:
Sample Input 1

6
1 2
1 3
1 1
3 2
2 2
3 2
Sample Output 1

true
false

Case 1
Case 2
Input (stdin)
6
1 2
1 3
1 1
4
2 2
4

Output (stdout)
2:L:1,R:3
1:
3:
3:L:1,
1:

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
import java.io.*;
class Node 
{
    int data;
    Node left;
    Node right;
    public Node(int data)
    {
        this.data = data;
    }
}
class  BST 
{
    public Node insert(int data, Node root)
    {
        if(root==null)
        {
            Node newNode = new Node(data);
            return newNode;
        }
        if(root.data >=data)
        {
            root.left = insert(data, root.left);
        }
        else
        {
            root.right = insert(data, root.right);
        }
        return root;
    }
    public Node remove(int data, Node root)
    {
        if(root==null)
        {
            return null;
        }
        if(data < root.data)
        {
            root.left = remove(data, root.left);
            return root;
        }
        else if(data > root.data)
        {
            root.right = remove(data, root.right);
            return root;
        }
        else
        {
            if(root.left == null && root.right == null)
            {
                return null;
            }
            else if(root.left ==  null)
            {
                return root.right;
            }
            else if(root.right== null)
            {
                return root.left;
            }
            else
            {
                Node minNode = root.right;
                while(minNode.left != null)
                {
                    minNode = minNode.left;
                }
                root.data = minNode.data;
                root.right = remove(minNode.data, root.right);
                return root;
            }
        }
    }
    public void printTree(Node root)
    {
        if(root==null)
        {
            return;
        }
        System.out.print(root.data + ":");
        if(root.left != null)
        {
            System.out.print("L:" + root.left.data + ",");
        }
        if(root.right != null)
        {
            System.out.print("R:" + root.right.data);
        }
        System.out.println();
        printTree(root.left);
        printTree(root.right);
    }
    public boolean search(int data, Node root)
    {
        if(root == null)
        {
            return false;
        }
        if(root.data == data)
        {
        return true;
        }
    else if(data > root.data)
    {
        return search(data, root.right);
    }
    else
    {
        return search(data, root.left);
    }
}
}
public class Main
{
	public static void main(String[] args) 
	{
	    Scanner sc = new Scanner(System.in);
	    BST tree = new BST();
	    Node root = null;
	    int choice, input;
	    int n = sc.nextInt();
	    for(int i=0;i<n;i++)
	    {
	        choice = sc.nextInt();
	        switch(choice)
	        {
	            case 1:
	                input = sc.nextInt();
	                root = tree.insert(input, root);
	                break;
	            case 2:
	                input = sc.nextInt();
	                root = tree.remove(input, root);
	                break;
	            case 3:
	                input = sc.nextInt();
	                System.out.println(tree.search(input,root));
	                break;
	                default:
	                    tree.printTree(root);
	                    break;
	        }
	    }
	}
}
