Given a sorted integer array A of size n, which contains all unique elements. You need to construct a balanced BST from this input array. Return the root of constructed BST.

Note: If array size is even, take first mid as root.
Input Format

The first line of input contains an integer, which denotes the value of n. The following line contains n space separated integers, that denote the values of array.
Constraints

Time:- 1 Sec
Output Format

The first and only line of output contains values of BST nodes, printed in pre order traversal.
Sample Input 0

7
1 2 3 4 5 6 7
Sample Output 0

4 2 1 3 6 5 7
Sample Input 1

1
2
Sample Output 1

2



Case 1
Case 2
Input (stdin)
7
1 2 3 4 5 6 7

Output (stdout)
4 2 1 3 6 5 7

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node 
{
    int data;
    Node left, right;
    Node(int d)
    {
        data = d;
        left = right= null;
    }
}
class Main 
{
    static Node root;
    Node SorttoBST(int arr[], int start, int end)
    {
        if(start>end)
        {
            return null;
        }
        int mid = (start + end)/2;
        Node node = new Node(arr[mid]);
        node.left = SorttoBST(arr, start, mid-1);
        node.right = SorttoBST(arr, mid+1, end);
        return node;
    }
    void preorder(Node node)
    {
        if(node ==null)
        {
            return;
        }
        System.out.print(node.data + " ");
        preorder(node.left);
        preorder(node.right);
    }
    public static void main (String[] args) {
        Main tree = new Main();
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        root = tree.SorttoBST(arr, 0, n-1);
        tree.preorder(root);
    }
}
