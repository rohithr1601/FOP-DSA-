You are given the root node of a binary tree.Count the number of nodes present.



Input Format

The first and the only line of input will contain the node data, all separated by a single space. Since -1 is used as an indication whether the left or right node data exist for root, it will not be a part of the node data.
Constraints

1 <= N <= 10^6
Where N is the total number of nodes in the binary tree.
Time Limit: 1 sec
Output Format

The only line of output prints the number of nodes in Binary Tree

Sample Input 0

1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1
Sample Output 0

7
Sample Input 1

5 6 10 2 3 -1 -1 -1 -1 -1 9 -1 -1
Sample Output 1

6



Case 1
Case 2
Input (stdin)
1 2 3 4 5 6 7 -1 -1 -1 -1 -1 -1 -1 -1

Output (stdout)
7

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node 
{
    int data;
    Node left;
    Node right;
    Node(int a) 
    {
        data = a;
        left = null;
        right = null;
    }
}
class Main 
{
    static Node head;
    static int count = 0;
    static void insert(Scanner sc) 
    {
        Queue<Node> queue = new LinkedList<>();
        int x = sc.nextInt();
        if (x != -1) 
        {
            head = new Node(x);
            queue.add(head);
            count++;
        }
        while (!queue.isEmpty()) 
        {
            Node temp = queue.poll();
            x = sc.nextInt();
            if (x != -1) 
            {
                temp.left = new Node(x);
                queue.add(temp.left);
                count++;
            }
            int y = sc.nextInt();
            if (y != -1) 
            {
                temp.right = new Node(y);
                queue.add(temp.right);
                count++;
            }
        }
    }
    static void inorder(Node node) 
    {
        if (node == null) return;
        inorder(node.left);
        System.out.print(node.data + " ");
        inorder(node.right);
    }
    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        insert(sc);
        System.out.println(count);
    }
}
