Given a Binary Search Tree and two integers k1 and k2, find and print the elements which are in range k1 and k2 (both inclusive).

Print the elements in increasing order.
Input Format

First line array size
Second line array elements
Third line k1 value
Fourth line k2 value
Constraints

Time :- 1 Sec
Output Format

The first and only line of output prints the elements which are in range k1 and k2 (both inclusive). Print the elements in increasing order.
Sample Input 0

6
8 5 10 2 6 7
6
10
Sample Output 0

6 7 8 10
Sample Input 1

1
1
2
5



Case 1
Case 2
Input (stdin)
6
8 5 10 2 6 7
6
10

Output (stdout)
6 7 8 10

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

import java.util.*;
class Node 
{
    int data;
    Node left;
    Node right;
    public Node(int data)
    {
        this.data = data;
    }
}
public class Main
{
    public static Node insert(Node root,int data)
    {
        Node newnode = new Node(data);
        if(root==null)
        {
            root = newnode;
            return root;
        }
        else if (root.data> data)
        {
            root.left = insert(root.left,data);
        }
        else if(root.data < data)
        {
            root.right = insert(root.right, data);
        }
        return root;
    }
    
    public void printTree(Node root)
    {
        if(root==null)
        {
            return;
        }
        System.out.print(root.data + ":");
        if(root.left != null)
        {
            System.out.print("L:" + root.left.data + ",");
        }
        if(root.right != null)
        {
            System.out.print("R:" + root.right.data);
        }
        System.out.println();
        printTree(root.left);
        printTree(root.right);
    }
    public static boolean search(Node root, int elt)
    {
        if(root == null)
        {
            return false;
        }
        if(root.data == elt)
        {
        return true;
        }
    	if(search(root.left, elt) || search(root.right, elt))
          return true;
      return false;
}
public static void print(Node root, int low, int high)
{
    if(root==null)
    {
        return;
    }
    print(root.left, low, high);
    if(root.data >=low && root.data <= high )
    {
        System.out.print(root.data + " ");
    }
    print(root.right, low, high);
}

	public static void main(String[] args) 
	{
	    Scanner sc = new Scanner(System.in);
	   int t = sc.nextInt();
	   Node root = null;
	   for(int i=0;i<t;i++)
	   {
	       int data = sc.nextInt();
	       root = insert(root, data);
	   }
	   int low = sc.nextInt();
	   int high = sc.nextInt();
	   print(root, low, high);
	}
}
